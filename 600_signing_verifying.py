# edwards25519 parameters
a = -1
d = 37095705934669439343138083508754565189542113879843219016388785533085940283555 
p = 2**255 - 19 # prime, order of Gallois field GF(p)
Gx = 15112221349535400772501151409588531511454012693041857206046113283949847762202
Gy = 46316835694926478169428394003475163141307993866256225615783033603165251855960
l = 2**252 + 27742317777372353535851937790883648493 # order of G, = order of subgroup generated by G 

# from previous chapters ############################################################################

def le_encode_to_bytes(number):
    return int.to_bytes(number, 32, "little")
  
def le_decode_to_number(bytes):
    return int.from_bytes(bytes, "little")

def extended_homogeneous_to_affine(Q):
    (X1, Y1, Z1, T1) = Q
    Z1_inv = pow(Z1, -1, p)
    x1 = (X1 * Z1_inv) % p
    y1 = (Y1 * Z1_inv) % p
    return (x1, y1)

def affine_to_extended_homogeneous(q):
    (x1, y1) = q
    X1 = x1
    Y1 = y1
    Z1 = 1
    T1 = (x1 * y1) % p
    return (X1, Y1, Z1, T1)

def add_extended_homogeneous(Q1, Q2):
    (X1, Y1, Z1, T1) = Q1
    (X2, Y2, Z2, T2) = Q2
    A = ((Y1 - X1) * (Y2 - X2)) % p
    B = ((Y1 + X1) * (Y2 + X2)) % p
    C = (T1 * 2 * d * T2) % p
    D = (Z1 * 2 * Z2) % p
    E = (B - A) % p
    F = (D - C) % p
    G = (D + C) % p
    H = (B + A) % p
    X3 = (E * F) % p
    Y3 = (G * H) % p
    T3 = (E * H) % p
    Z3 = (F * G) % p
    return (X3, Y3, Z3, T3)

def double_extended_homogeneous(Q):
    (X1, Y1, Z1, T1) = Q
    A = (X1 * X1) % p
    B = (Y1 * Y1) % p
    C = (2 * Z1 * Z1) % p
    H = (A + B) % p
    E = (H - (X1 + Y1) * (X1 + Y1)) % p
    G = (A - B) % p
    F = (C + G) % p
    X3 = (E * F) % p
    Y3 = (G * H) % p
    T3 = (E * H) % p
    Z3 = (F * G) % p
    return (X3, Y3, Z3, T3)
  
def point_multiplication(s, P):
    Q = (0, 1, 1, 0)                  # neutral element
    bits = bin(s)[2:]                 # bit encoding of s
    bitsPadded = bits.rjust(256, '0') # the bit representation of all scalars is extended with leading 0 to 256 bit 
    for b in bitsPadded:              # for each step, the same operations are done, no matter if the bit is 0 or 1
        if b == '0':
            P = add_extended_homogeneous(Q, P)
            Q = double_extended_homogeneous(Q)
        else:
            Q = add_extended_homogeneous(Q, P)
            P = double_extended_homogeneous(P)
    return Q

def compress_point(Q):
    (x, y) = extended_homogeneous_to_affine(Q)
    x_b = le_encode_to_bytes(x)
    y_b = bytearray(le_encode_to_bytes(y)) # convert to bytearray because of bit manipulations
    y_b[31] = y_b[31] | (0x80 if (x_b[0] & 1) else 0) # copy least signficant bit from y to most significant bit to y
    return bytes(y_b) 

def decompress_point(y_b):
    y_b = bytearray(y_b) # convert to bytearray because of bit manipulations
    x_sign = (y_b[31] & 0x80 == 0x80)  # extract x sign bit
    y_b[31] = y_b[31] & ~0x80          # clear x sign bit
    y = le_decode_to_number(y_b)
    x = recover_x(y, x_sign)
    if x is None:
        return None
    else:
        return affine_to_extended_homogeneous((x, y))

def recover_x(y, x_sign):
    x2 = ((y * y - 1) * pow(d * y * y + 1, -1, p)) % p
    x = pow(x2, (p + 3) // 8, p)
    x_final = None
    if ((x * x - x2) % p == 0):
        x_final = x
    elif ((x * x + x2) % p == 0):
        x_final = (x * pow(2, (p - 1) // 4, p)) % p
    else:
        return None
    if (x_final == 0) and (x_sign == 1):
        return None
    if (x_final & 1) != x_sign:
        x_final = p - x_final
    return x_final
  
def clamp(data_b): # data_b in little endian order
    a_b = bytearray(data_b)
    a_b[0] &= 248  # 0.  byte: set the three least significant bits to 0
    a_b[31] &= 127 # 31. byte: set the most significant bit to 0
    a_b[31] |= 64  #           ...and the second-most significant bit to 1
    return bytes(a_b) 

import hashlib

def secret_expand(secret_key_b):
    if len(secret_key_b) != 32:
        raise Exception("Bad size of secret key")
    hash_b = hashlib.sha512(secret_key_b).digest()   
    a_b = clamp(hash_b[:32])
    a = le_decode_to_number(a_b)
    return (a, hash_b[32:])

def get_public_from_secret(secret_key_b):
    (a, dummy) = secret_expand(secret_key_b)
    G_2 = (Gx, Gy)
    G_4 = affine_to_extended_homogeneous(G_2)
    return compress_point(point_multiplication(a, G_4))

# new ###############################################################################################

# convention, suffix:
# _4: point in extended homogeneous coordinates
# _2: point in affine coordinates
# _b: bytes sequence
# othervise: integer

def is_point_equal(Q1_4, Q2_4):
    (X1, Y1, Z1, T1) = Q1_4
    (X2, Y2, Z2, T2) = Q2_4
    # X1 / Z1 == X2 / Z2  <==>  X1 * Z2 == X2 * Z1
    return ((X1 * Z2 - X2 * Z1) % p == 0) and ((Y1 * Z2 - Y2 * Z1) % p == 0)

def sign(secret_key_b, msg_b):
    a, prefix_b = secret_expand(secret_key_b)
    G_4 = affine_to_extended_homogeneous((Gx, Gy))
    A_b = compress_point(point_multiplication(a, G_4))
    r = le_decode_to_number(hashlib.sha512(prefix_b + msg_b).digest()) % l
    Rs_b = compress_point(point_multiplication(r, G_4))
    h =  le_decode_to_number(hashlib.sha512(Rs_b + A_b + msg_b).digest()) % l
    s = (r + h * a) % l
    return Rs_b + le_encode_to_bytes(s) # signature_b

def verify(public_key_b, msg_b, signature_b):
    if len(public_key_b) != 32:
        raise Exception("Bad public key length")
    if len(signature_b) != 64:
        raise Exception("Bad signature length")
    A_4 = decompress_point(public_key_b)
    if not A_4:
        return False
    Rs_b = signature_b[:32]
    R_4 = decompress_point(Rs_b)
    if not R_4:
        return False
    s = le_decode_to_number(signature_b[32:])  
    if s >= l: 
        return False
    h =  le_decode_to_number(hashlib.sha512(Rs_b + public_key_b + msg_b).digest()) % l
    G_4 = affine_to_extended_homogeneous((Gx, Gy))
    sB_4 = point_multiplication(s, G_4)
    hA_4 = point_multiplication(h, A_4)
    return is_point_equal(sB_4, add_extended_homogeneous(R_4, hA_4))

# testvectors from RFC 8032, 7.1.  Test Vectors for Ed25519

#
# test 1
#
secret_key_b = bytes.fromhex("9d61b19deffd5a60ba844af492ec2cc44449c5697b326919703bac031cae7f60")
msg_b = bytes.fromhex("");

signature_b = sign(secret_key_b, msg_b)
print(signature_b.hex())

public_key_b = bytes.fromhex("d75a980182b10ab7d54bfed3c964073a0ee172f3daa62325af021a68f707511a")
verified = verify(public_key_b, msg_b, signature_b)
print(verified)

#
# test 2
#
secret_key_b = bytes.fromhex("4ccd089b28ff96da9db6c346ec114e0f5b8a319f35aba624da8cf6ed4fb8a6fb")
msg_b = bytes.fromhex("72");

signature_b = sign(secret_key_b, msg_b)
print(signature_b.hex())

public_key_b = bytes.fromhex("3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c")
verified = verify(public_key_b, msg_b, signature_b)
print(verified)

#
# test 3
#
secret_key_b = bytes.fromhex("c5aa8df43f9f837bedb7442f31dcb7b166d38535076f094b85ce3a2e0b4458f7")
msg_b = bytes.fromhex("af82");

signature_b = sign(secret_key_b, msg_b)
print(signature_b.hex())

public_key_b = bytes.fromhex("fc51cd8e6218a1a38da47ed00230f0580816ed13ba3303ac5deb911548908025")
verified = verify(public_key_b, msg_b, signature_b)
print(verified)

#
# test 1024
#
secret_key_b = bytes.fromhex("f5e5767cf153319517630f226876b86c8160cc583bc013744c6bf255f5cc0ee5")
msg_b = bytes.fromhex("08b8b2b733424243760fe426a4b54908632110a66c2f6591eabd3345e3e4eb98fa6e264bf09efe12ee50f8f54e9f77b1e355f6c50544e23fb1433ddf73be84d879de7c0046dc4996d9e773f4bc9efe5738829adb26c81b37c93a1b270b20329d658675fc6ea534e0810a4432826bf58c941efb65d57a338bbd2e26640f89ffbc1a858efcb8550ee3a5e1998bd177e93a7363c344fe6b199ee5d02e82d522c4feba15452f80288a821a579116ec6dad2b3b310da903401aa62100ab5d1a36553e06203b33890cc9b832f79ef80560ccb9a39ce767967ed628c6ad573cb116dbefefd75499da96bd68a8a97b928a8bbc103b6621fcde2beca1231d206be6cd9ec7aff6f6c94fcd7204ed3455c68c83f4a41da4af2b74ef5c53f1d8ac70bdcb7ed185ce81bd84359d44254d95629e9855a94a7c1958d1f8ada5d0532ed8a5aa3fb2d17ba70eb6248e594e1a2297acbbb39d502f1a8c6eb6f1ce22b3de1a1f40cc24554119a831a9aad6079cad88425de6bde1a9187ebb6092cf67bf2b13fd65f27088d78b7e883c8759d2c4f5c65adb7553878ad575f9fad878e80a0c9ba63bcbcc2732e69485bbc9c90bfbd62481d9089beccf80cfe2df16a2cf65bd92dd597b0707e0917af48bbb75fed413d238f5555a7a569d80c3414a8d0859dc65a46128bab27af87a71314f318c782b23ebfe808b82b0ce26401d2e22f04d83d1255dc51addd3b75a2b1ae0784504df543af8969be3ea7082ff7fc9888c144da2af58429ec96031dbcad3dad9af0dcbaaaf268cb8fcffead94f3c7ca495e056a9b47acdb751fb73e666c6c655ade8297297d07ad1ba5e43f1bca32301651339e22904cc8c42f58c30c04aafdb038dda0847dd988dcda6f3bfd15c4b4c4525004aa06eeff8ca61783aacec57fb3d1f92b0fe2fd1a85f6724517b65e614ad6808d6f6ee34dff7310fdc82aebfd904b01e1dc54b2927094b2db68d6f903b68401adebf5a7e08d78ff4ef5d63653a65040cf9bfd4aca7984a74d37145986780fc0b16ac451649de6188a7dbdf191f64b5fc5e2ab47b57f7f7276cd419c17a3ca8e1b939ae49e488acba6b965610b5480109c8b17b80e1b7b750dfc7598d5d5011fd2dcc5600a32ef5b52a1ecc820e308aa342721aac0943bf6686b64b2579376504ccc493d97e6aed3fb0f9cd71a43dd497f01f17c0e2cb3797aa2a2f256656168e6c496afc5fb93246f6b1116398a346f1a641f3b041e989f7914f90cc2c7fff357876e506b50d334ba77c225bc307ba537152f3f1610e4eafe595f6d9d90d11faa933a15ef1369546868a7f3a45a96768d40fd9d03412c091c6315cf4fde7cb68606937380db2eaaa707b4c4185c32eddcdd306705e4dc1ffc872eeee475a64dfac86aba41c0618983f8741c5ef68d3a101e8a3b8cac60c905c15fc910840b94c00a0b9d0")

signature_b = sign(secret_key_b, msg_b)
print(signature_b.hex())

public_key_b = bytes.fromhex("278117fc144c72340f67d0f2316e8386ceffbf2b2428c9c51fef7c597f1d426e")
verified = verify(public_key_b, msg_b, signature_b)
print(verified)

#
# test SHA(abc)
#
secret_key_b = bytes.fromhex("833fe62409237b9d62ec77587520911e9a759cec1d19755b7da901b96dca3d42")
msg_b = bytes.fromhex("ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f");

signature_b = sign(secret_key_b, msg_b)
print(signature_b.hex())

public_key_b = bytes.fromhex("ec172b93ad5e563bf4932c70e1245034c35467ef2efd4d64ebf819683467e2bf")
verified = verify(public_key_b, msg_b, signature_b)
print(verified)
